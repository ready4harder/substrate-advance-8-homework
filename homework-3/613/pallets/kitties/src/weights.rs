
//! Autogenerated weights for pallet_kitties
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2024-09-22, STEPS: `20`, REPEAT: `10`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Lenovo`, CPU: `Intel(R) Core(TM) i5-8250U CPU @ 1.60GHz`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./target/production/solochain-template-node
// benchmark
// pallet
// --wasm-execution=compiled
// --pallet
// pallet_kitties
// --extrinsic
// *
// --steps
// 20
// --repeat
// 10
// --output
// pallets/kitties/src/weights.rs
// --template
// .maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_kitties.
pub trait WeightInfo {
	fn create() -> Weight;
	fn breed() -> Weight;
	fn sale() -> Weight;
	fn bid() -> Weight;
	fn transfer() -> Weight;
}

/// Weights for pallet_kitties using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `Random::RandomMaterial` (r:1 w:0)
	/// Proof: `Random::RandomMaterial` (`max_values`: Some(1), `max_size`: Some(2594), added: 3089, mode: `MaxEncodedLen`)
	/// Storage: `Kitties::NextKittyId` (r:1 w:1)
	/// Proof: `Kitties::NextKittyId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Kitties::Kitties` (r:0 w:1)
	/// Proof: `Kitties::Kitties` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Kitties::KittyOwner` (r:0 w:1)
	/// Proof: `Kitties::KittyOwner` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn create() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `150`
		//  Estimated: `4079`
		// Minimum execution time: 18_300_000 picoseconds.
		Weight::from_parts(18_800_000, 4079)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `Kitties::Kitties` (r:2 w:1)
	/// Proof: `Kitties::Kitties` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Random::RandomMaterial` (r:1 w:0)
	/// Proof: `Random::RandomMaterial` (`max_values`: Some(1), `max_size`: Some(2594), added: 3089, mode: `MaxEncodedLen`)
	/// Storage: `Kitties::NextKittyId` (r:1 w:1)
	/// Proof: `Kitties::NextKittyId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Kitties::KittyOwner` (r:0 w:1)
	/// Proof: `Kitties::KittyOwner` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn breed() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `307`
		//  Estimated: `6247`
		// Minimum execution time: 28_300_000 picoseconds.
		Weight::from_parts(28_700_000, 6247)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `Kitties::KittyOwner` (r:1 w:0)
	/// Proof: `Kitties::KittyOwner` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Kitties::KittyOnSale` (r:0 w:1)
	/// Proof: `Kitties::KittyOnSale` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn sale() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `244`
		//  Estimated: `3709`
		// Minimum execution time: 14_900_000 picoseconds.
		Weight::from_parts(16_200_000, 3709)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Kitties::KittyOnSale` (r:1 w:0)
	/// Proof: `Kitties::KittyOnSale` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Kitties::KittyOwner` (r:1 w:0)
	/// Proof: `Kitties::KittyOwner` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Kitties::KittiesBid` (r:1 w:1)
	/// Proof: `Kitties::KittiesBid` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn bid() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `289`
		//  Estimated: `3754`
		// Minimum execution time: 22_700_000 picoseconds.
		Weight::from_parts(23_200_000, 3754)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Kitties::KittyOwner` (r:1 w:1)
	/// Proof: `Kitties::KittyOwner` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Kitties::KittyOnSale` (r:1 w:1)
	/// Proof: `Kitties::KittyOnSale` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Kitties::KittiesBid` (r:1 w:1)
	/// Proof: `Kitties::KittiesBid` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn transfer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `484`
		//  Estimated: `3949`
		// Minimum execution time: 69_800_000 picoseconds.
		Weight::from_parts(70_700_000, 3949)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: `Random::RandomMaterial` (r:1 w:0)
	/// Proof: `Random::RandomMaterial` (`max_values`: Some(1), `max_size`: Some(2594), added: 3089, mode: `MaxEncodedLen`)
	/// Storage: `Kitties::NextKittyId` (r:1 w:1)
	/// Proof: `Kitties::NextKittyId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Kitties::Kitties` (r:0 w:1)
	/// Proof: `Kitties::Kitties` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Kitties::KittyOwner` (r:0 w:1)
	/// Proof: `Kitties::KittyOwner` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn create() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `150`
		//  Estimated: `4079`
		// Minimum execution time: 18_300_000 picoseconds.
		Weight::from_parts(18_800_000, 4079)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `Kitties::Kitties` (r:2 w:1)
	/// Proof: `Kitties::Kitties` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Random::RandomMaterial` (r:1 w:0)
	/// Proof: `Random::RandomMaterial` (`max_values`: Some(1), `max_size`: Some(2594), added: 3089, mode: `MaxEncodedLen`)
	/// Storage: `Kitties::NextKittyId` (r:1 w:1)
	/// Proof: `Kitties::NextKittyId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Kitties::KittyOwner` (r:0 w:1)
	/// Proof: `Kitties::KittyOwner` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn breed() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `307`
		//  Estimated: `6247`
		// Minimum execution time: 28_300_000 picoseconds.
		Weight::from_parts(28_700_000, 6247)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `Kitties::KittyOwner` (r:1 w:0)
	/// Proof: `Kitties::KittyOwner` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Kitties::KittyOnSale` (r:0 w:1)
	/// Proof: `Kitties::KittyOnSale` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn sale() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `244`
		//  Estimated: `3709`
		// Minimum execution time: 14_900_000 picoseconds.
		Weight::from_parts(16_200_000, 3709)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Kitties::KittyOnSale` (r:1 w:0)
	/// Proof: `Kitties::KittyOnSale` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Kitties::KittyOwner` (r:1 w:0)
	/// Proof: `Kitties::KittyOwner` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Kitties::KittiesBid` (r:1 w:1)
	/// Proof: `Kitties::KittiesBid` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn bid() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `289`
		//  Estimated: `3754`
		// Minimum execution time: 22_700_000 picoseconds.
		Weight::from_parts(23_200_000, 3754)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Kitties::KittyOwner` (r:1 w:1)
	/// Proof: `Kitties::KittyOwner` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Kitties::KittyOnSale` (r:1 w:1)
	/// Proof: `Kitties::KittyOnSale` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Kitties::KittiesBid` (r:1 w:1)
	/// Proof: `Kitties::KittiesBid` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn transfer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `484`
		//  Estimated: `3949`
		// Minimum execution time: 69_800_000 picoseconds.
		Weight::from_parts(70_700_000, 3949)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
}